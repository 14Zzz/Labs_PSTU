#include <iostream>
#include <string>

using namespace std;

string names[100] = { "Руслан", "Алексей", "Пол", "Артем", "Егор", "Александр", "Дмитрий", "Максим", "Сергей", "Андрей", "Илья", "Кирилл", "Михаил", "Матвей", "Роман", "Иван", "Ильяс", "Арсенний", "Денис", "Евгений", "Даниил", "Тимофей", "Владислав", "Павел", "Марк", "Константин", "Тимур", "Олег", "Ярослав", "Антон", "Николай", "Глеб", "Данил", "Савелий", "Вадим", "Степан", "Юрий", "Богдан", "Артур", "Семен", "Макар", "Лев", "Виктор", "Елисей", "Виталий", "Вячеслав", "Захар", "Мирон", "Дамир", "Георгий", "Давид", "Платон", "Анатолий", "Григорий", "Демид", "Данила", "Станислав", "Василий", "Федор", "Родион" , "Леонид", "Одиссей", "Валерий", "Святослав", "Борис", "Эдуард", "Марат", "Герман", "Даниэль", "Петр", "Амир", "Всеволод", "Мирослав", "Гордей", "Артемий", "Эмиль", "Назар", "Савва", "Ян", "Рустам", "Ингат", "Влад", "Альберт", "Тамерлан", "Айдар", "Роберт", "Марсель", "Ильдар", "Самир", "Тихон" , "Рамиль", "Ринат", "Радмир", "Филипп", "Арсен", "Ростислав", "Святогор", "Яромир", "Алдуин", "Пастернак" };
string postname[100] = { "Ланнистер", "Баратеон", "Талли", "Аррены", "Грейджой", "Бронн", "Мартелл", "Атрейдес", "Харконнен", "Гильдеец", "Смирнов", "Иванов", "Кузнецов", "Соколов", "Попов", "Лебедев", "Козлов", "Новиков", "Морозов", "Петров", "Волков", "Соловьев", "Васильев", "Зайцев", "Павлов", "Семенов", "Голубев", "Виноградов", "Богданов", "Влолбев", "Федоров", "Михайлов", "Беляев", "Тарасов", "Белов", "Комаров", "Тарасов", "Белов", "Комаров", "Орлов", "Киселев", "Андреев", "Макаров", "Гладиатор", "Ильин", "Лазарев", "Медведев", "Ершов", "Никитин", "Соболев", "Рябов", "Поляков", "Цветков", "Данилов", "Жуков", "Фролов", "Журавльев", "Драконорожденный", "Егоров", "Петухов" , "Тимофеев", "Власов", "Калорв", "Лапин", "Сазонов", "Гордеев", "Уваров", "Брагин", "Якушев", "Зыков", "Шарапов", "Рожков", "Самоснов", "Лихачев", "Щукин", "Шаров", "Сафонов", "Птеродактель", "Устинов", "Исаев", "Капустин", "Кириллов", "Рогов", "Князев", "Кулагин", "Логинов", "Савин", "Туров", "Блинов", "Королев" , "Пестов", "Меркушев", "Гущин", "Буров", "Галкин", "Коновалов", "Громов", "Мельников", "Давыдов", "Русаков" };
string patr[100] = { "Витальев", "Иванов", "Сергеев", "Владимиров", "Алексеев", "Мизаров", "Степанов", "Каладиев", "Булатович", "Лексеевич", "Джиравоич", "Лопарович", "Хорашивич", "Шолораович", "Корупович", "Щокурепич", "Защеливич", "Степонвич", "Жиданович", "Жолкавович", "Долгичвич", "Зоглаоррвич", "Ларенвич", "Апотьлиавич", "Логравич", "Хологрвич", "Хорекунивич", "Экуравоич", "Федорович", "Болкивич", "Ждаровкич", "Шорокывич", "Героувич", "Носорович", "Гордунвич", "Цекрович", "Шитохович", "Дорекфич", "Жирович", "Эколович", "Кардинович", "Можетвич", "Твичевич", "Ютубович", "Тровович", "Дискордович", "Скапович", "Вкович", "Карандошович", "Стрелкович", "Усталович", "Щеголович", "Викингович", "Ероваич", "Евроводич", "Бытович", "Жетович", "Цукович", "Парович", "Мирович" , "Часович", "Владимриович", "Оакович", "Лапович", "Ушович", "Хокунович", "Шоуканович", "Скорпирович", "Вальгалович", "Асасинович", "Котович", "Лопухович", "Автомобиволич", "Ипотивович", "Сахарович", "Можетович", "Хорошкович", "Началович", "Жароквоич", "Нулевич", "Можектович", "Ктокович", "Собакович", "Радорович", "Флешович", "Хартович", "Резонович", "Сезонович", "Ансерович" , "Коверович", "Пикович", "Глазович", "Асович", "Легионвич", "Шадоувич", "Энович", "Пиполович", "Медневич", "Концович" };
string pass[100] = { "5467 852548", "5467 852548", "5468 852549", "5470 852551", "5473 852554", "5477 852558", "5482 852563", "5488 852569", "5495 852576", "5503 852584", "5512 852593", "5522 852603", "5533 852614", "5545 852626", "5558 852639", "5572 852653", "5587 852668", "5603 852684", "5620 852701", "5638 852719", "5657 852738", "5677 852758", "5698 852779", "5720 852801", "5743 852824", "5767 852848", "5792 852873", "5818 852899", "5845 852926", "5873 852954", "5902 852983", "5932 853013", "5963 853044", "5995 853076", "6028 853109", "6062 853143", "6097 853178", "6133 853214", "6170 853251", "6208 853289", "6247 853328", "6287 853368", "6328 853409", "6370 853451", "6413 853494", "6457 853538", "6502 853583", "6548 853629", "6595 853676", "6643 853724", "6692 853773", "6742 853823", "6793 853874", "6845 853926", "6898 853979", "6952 854033", "7007 854088", "7063 854144", "7120 854201", "7178 854259", "7237 854318", "7297 854378", "7358 854439", "7420 854501", "7483 854564", "7547 854628", "7612 854693", "7678 854759", "7745 854826", "7813 854894", "7882 854963", "7952 855033", "8023 855104", "8095 855176", "8168 855249", "8242 855323", "8317 855398", "8393 855474", "8470 855551", "8548 855629", "8627 855708", "8707 855788", "8788 855869", "8870 855951", "8953 856034", "9037 856118", "9122 856203", "9208 856289", "9295 856376", "9383 856464", "9472 856553", "9562 856643", "9653 856734", "9745 856826", "9838 856919", "9932 857013", "1027 857108", "1123 857204", "1220 857301", "10318 857399" };
string addres[100] = { "ул.Грачёвская 99", "ул.Грачёвская 1", "ул.Грачёвская 2", "ул.Грачёвская 3", "ул.Грачёвская 4", "ул.Грачёвская 5", "ул.Грачёвская 6", "ул.Грачёвская 7", "ул.Грачёвская 8", "ул.Грачёвская 9", "ул.Центральная 88", "ул.Центральная 89", "ул.Центральная 90", "ул.Центральная 91", "ул.Центральная 92", "ул.Центральная 93", "ул.Центральная 94", "ул.Центральная 95", "ул.Центральная 96", "ул.Центральная 97", "ул.Гагарина 56", "ул.Гагарина 57", "ул.Гагарина 58", "ул.Гагарина 59", "ул.Гагарина 60", "ул.Гагарина 61", "ул.Гагарина 62", "ул.Гагарина 63", "ул.Гагарина 64", "ул.Гагарина 65", "ул.Чернышевского 67", "ул.Чернышевского 68", "ул.Чернышевского 69", "ул.Чернышевского 70", "ул.Чернышевского 71", "ул.Чернышевского 72", "ул.Чернышевского 73", "ул.Чернышевского 74", "ул.Чернышевского 75", "ул.Чернышевского 76", "ул.Академика Королёва 69", "ул.Акаде�ика Королёва 70", "ул.Академика Королёва 71", "ул.Академика Королёва 72", "ул.Академика Королёва 73", "ул.Академика Королёва 74", "ул.Академика Королёва 75", "ул.Академика Королёва 76", "ул.Академика Королёва 77", "ул.Академика Королёва 78", "Бл.Бухарестская","пр.Бухарестская","Сп.Космонавтов","Пр.Гагарина", "проезд Балканская, 96", "въезд Гагарина, 09", "въезд Ломоносова, 20", "шоссе Славы, 90", "пл. Славы, 86", "бульвар 1905 года, 38", "пер. Будапештсткая, 90", "пер. Ленина, 78", "ул. Гоголя, 59", "наб. Гагарина, 52", "бульвар Сталина, 77", "пл. Чехова, 40", "ул. Балканская, 33", "бульвар Косиора, 64", "ул. Кравченко, д. 61", "ул. Воронежская, д. 230", "шоссе Ладыгина, 53", "наб. Космонавтов, 99", "спуск Чехова, 55", "ул. Косиора, 26", "въезд Косиора, 73", "пер. Ладыгина, 85", "пл. Домодедовская, 43", "проспект Бяних д. 27", "проспект Додэское д. 89", "улица Лотрское д. 72", "проспект Торых д. 96", "проспект Сянодих д. 364", "улица Жюижское д. 18", "проспект Пяеых д. 97", "улица Жятаз д. 19", "улица Бусз д. 46", "проспект Хиуого д. 11", "улица Гефская д. 93-б", "улица Нэрс д. 278", "проспект Сежитых д. 51"};

struct people
{
	string FIO =  "null";
	string pass =  "null";
	string addres =  "null";
};

struct hash_table
{
	people* arr;
	hash_table(int size)
	{
		arr = new people[size];
	}
	void add(people tmp, int size);
	void findIndex(string pass, int size);
};

string rand_name()
{
	return (postname[rand() % 100] +  " " + names[rand() % 100] +  " " + patr[rand() % 100]);
}
string rand_pass()
{
	return pass[rand() % 100];
}
string rand_addres()
{
	return addres[rand() % 100];
}

people create_people()
{
	people tmp;
	tmp.FIO = rand_name();
	tmp.pass = rand_pass();
	tmp.addres = rand_addres();
	return tmp;
}

void fill_people(people* arr, int count)
{
	for (int i = 0; i < count; i++)
	{
		arr[i] = create_people();
	}
}

void show(const people tmp)
{
	cout << "ФИО:            " << tmp.FIO << endl;
	cout << "Номер паспорта: " << tmp.pass << endl;
	cout << "Адрес:          " << tmp.addres << endl << endl;
}

void showTable(hash_table* table, int size)
{
	for (int i = 0; i < size; i++)
	{
		show(table->arr[i]);
	}
}

void print_people(people* arr, int count)
{
	for (int i = 0; i < count; i++)
	{
		show(arr[i]);
	}
}

int hash_f(string str, int size)
{
	long double a = (0.68 * stoi(str));
	double a1 = size * (a - static_cast<int>(a));
	return static_cast<int>(a1);
}

int collis = 0;
void hash_table::add(people tmp, int size)
{
	int index = hash_f(tmp.pass, size);
	int hash = index;
	if (arr[index].FIO ==  "null")
	{
		arr[index] = tmp;
		return;
	}
	else
	{
		while (index < size)
		{
			if (arr[index].FIO ==  "null")
			{
				arr[index] = tmp;
				return;
			}
			index++;
			collis++;
		}
		if (index >= size)
		{
			index = 0;
			collis++;
			while (index < hash)
			{
				if (arr[index].FIO ==  "null")
				{
					arr[index] = tmp;
					return;
				}
				index++;
				collis++;
			}
		}
	}
}

void hash_table::findIndex(string pass, int size)
{
	int hash = hash_f(pass, size);
	int index = hash;
	while (arr[index].pass != pass && index < size)
	{
		index++;
	}
	cout << "Индекс = " << index;
	if (index >= size)
	{
		index = 0;
		while (arr[index].pass != pass && index < hash)
		{
			index++;
		}
		if (index >= hash)
		{
			cout << "Такого человека нет";
		}
	}
}

int main()
{
	setlocale(LC_ALL, "rus");
	int size;
	string Finde_Index;
	cout << "Введите кол-во элементов: ";
	cin >> size;
	cout << endl;
	people* arr = new people[size];
	hash_table table(size);
	fill_people(arr, size);
	
	for (int i = 0; i < size; i++)
	{
		table.add(arr[i], size);
	}
	showTable(&table, size);
	
	cout << "Введите номер паспорта по которому нужно найти человека: ";
	cin.get();
	getline(cin, Finde_Index);
	table.findIndex(Finde_Index, size);
	
	cout << endl << endl;
	cout << "Кол-во коллизий для " << size << " записей: " << collis << endl;
	delete[] arr;
	return 0;
}
